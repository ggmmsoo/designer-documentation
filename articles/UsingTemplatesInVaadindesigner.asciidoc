[[using-templates-in-vaadin-designer]]
Using templates in Vaadin Designer
----------------------------------

In this tutorial we take a look at how to use templates for creating new
designs with Vaadin Designer. Templates are easy to use and allow you to
quickly get up to speed with developing your application. The first
official release of Designer ships with only a couple of templates to
get you started, but you can easily install your own templates and even
create them yourself. This tutorial assumes you have installed Vaadin
Plugin and Vaadin Designer. The set of templates used in this tutorial
are available to be downloaded from
https://github.com/vaadin/ibm-design-language-templates/tree/master/DesignerTemplate/completed_templates[here].

image:https://vaadin.com/documents/10187/11059787/templates.png/e89562d1-5930-473a-883d-1412eff09102?t=1443090029574[Three
color variations of the same template]

*Three color variations on the dashboard navigation template*

[[installing-a-template]]
Installing a template
~~~~~~~~~~~~~~~~~~~~~

Vaadin Designer and the declarative approach

Vaadin 7.4 introduced a declarative syntax for setting up the UI content
of your Vaadin application. The declarative way uses files containing
html like tags to represent the set of layouts and components in your
view. The file extension is .html and it looks very similar to HTML, but
the tags are Vaadin specific. These files are called designs and the
core Vaadin Framework can read these files and render your UI.

Vaadin Designer allows you to produce and edit the design files using
visual tools instead of just writing those manually.

In Vaadin Designer 1.0 installing a template is done by copying it
manually to the designated directory. Copy the template files to a
designated folder: `vaadin/designer/templates` in your home directory.
The directory might not exist, so you might have to create it first
(using `mkdir` from a command line if using Windows). Now that you have
successfully installed the templates, Vaadin Designer should be able to
pick them up. In the next steps you will use these templates to create
your own designs.

[[using-an-existing-template]]
Using an existing template
~~~~~~~~~~~~~~~~~~~~~~~~~~

Follow these steps to use an existing template:

Create a new Vaadin 7 project e.g. by using Vaadin Plugin or creating it
from one of the existing Vaadin’s Maven archetypes.

Launch the wizard for creating a new design by right-clicking your
project and selecting +
*New ► Other... ► Vaadin Design*.

image:https://vaadin.com/documents/10187/11059787/create-new-design-0.png/1aedfcfe-9210-455e-9911-f2a0fb89aa65?t=1443090029000[New
design wizard step 1]

In the dialog, give a name for the design. This name will be used in the
design file and in the backing code file. The name will also be the type
name for your design class so a Java style naming convention is
recommended (i.e. CamelCase). In addition to the components and layouts
the template file might contain style definitions to further define the
look-and-feel. These styles should be copied into your template by using
the Designer’s import feature. Click Next to see the style definitions.
If you selected a template that doesn’t contain style definitions, the
Next button is not available and you can click Finish.

image:https://vaadin.com/documents/10187/11059787/create-new-design-1.png/e91c79ce-ad94-48b2-b0db-ccdcd2f2adfd?t=1443090030000[New
design wizard step 2]

*Style definitions in a template*

In Vaadin Designer 1.0 the CSS style definitions in a template file are
by default copied to a file called `designs.scss`, which is created into
your theme folder and imported in your theme’s `styles.scss.` Because of
the order of imports and how Sass variables are handled the template can
introduce its own settings for Valo theme parameters without limiting
your ability to override them easily in your theme.

To avoid name clashes in CSS selectors, it’s a very good practice to
scope the style definitions with a template specific name to reduce the
possibility of different templates affecting each other’s appearance.

By default the option to copy the style definitions automatically is
selected. The style definitions will be copied to a file called
`designs.scss` and an `@import` clause will be inserted into your theme
scss. Click Finish. The template in this example contains some nice
defaults for some of the Valo theme parameters, but you can of course
override them as you wish in your theme.

image:https://vaadin.com/documents/10187/11059787/create-new-design-2.png/e9e9a0b9-216a-4042-85c2-56feb254fd75?t=1443090030000[New
design wizard step 3]

The wizard creates two files for you: the design and the backing code
file. The code file is something you should never modify, it’s handled
by Vaadin Designer. The design file is a new copy of the selected
template. It is just a regular design file containing Vaadin declarative
syntax tags that you can edit using the Designer or by editing the
source manually.

image:https://vaadin.com/documents/10187/11059787/project-explorer.png/fc1caa98-f873-4e58-bc76-20a4fb6a9604?t=1443090030000[Project
files created by the wizard in Eclipse]

Now that you have a very nice basis for your application view designs,
you can continue adding more things to finish your design. To use the
design in your application, just instantiate the class defined in the
backing Java file and set it as the content of your UI.

[source, java]
....
@Override
protected void init(VaadinRequest vaadinRequest) {
    setContent(new MainViewDesign());
}
....

[[creating-your-own-template]]
Creating your own template
~~~~~~~~~~~~~~~~~~~~~~~~~~

If you’re interested in sharing your design as a template for others to
base their work on, you can do it quite easily.

- To use your design as a template, you don’t have to modify the file in
any way. It can be used as such. Just copy the file to your templates
directory or share your design file and allow others to reuse your
design patterns as a basis for their application views.
- If you want to share theme style definitions with your template, you
can do so by storing the Sass code inside the template file. Insert a
`<style>` tag in the `<head>` tag and copy-paste the style definitions
there.

In this tutorial you learned about templates; a powerful feature of
Vaadin Designer to speed up your development. You also learned how to
save your modified results as a new design template to be reused later.
Great job!
